<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Gavin's Blog]]></title>
  <subtitle><![CDATA[Programming (cdr (life))]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.ligan.me/"/>
  <updated>2014-12-07T16:07:03.851Z</updated>
  <id>http://blog.ligan.me/</id>
  
  <author>
    <name><![CDATA[Gavin]]></name>
    <email><![CDATA[gavin.li1986@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用oh-my-zsh内置插件省略bundle exec]]></title>
    <link href="http://blog.ligan.me/2014/03/02/shi-yong-oh-my-zshnei-zhi-cha-jian-sheng-lue-bundle-exec/"/>
    <id>http://blog.ligan.me/2014/03/02/shi-yong-oh-my-zshnei-zhi-cha-jian-sheng-lue-bundle-exec/</id>
    <published>2014-03-02T04:09:23.000Z</published>
    <updated>2014-12-07T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="bundle_exec">bundle exec</h2>
<p>在使用bundler管理的项目中,为了统一使用环境,经常要使用<code>bundle exec</code>来执行项目中的各种命令.</p>
<p>比如在某些项目中使用的是rake 0.9而系统中安装有rake 10时候如果不加上<code>bundle exec</code>就会提示错误.这时候就需要执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle <span class="keyword">exec</span> rake <span class="keyword">my</span>:task</div></pre></td></tr></table></figure>

<p>以前使用rvm时可以通过每个项目不同的gemset来统一项目中不同版本的gem.换了rbenv之后完全依靠bunder来管理gem之后每次执行<code>bundle exec</code>就有点麻烦了.</p>
<p>有一些工具可以代替<code>bundle exec</code>,比如<a href="https://github.com/gma/bundler-exec" target="_blank" rel="external">bundler-exec</a></p>
<p>但是如果正好使用oh-my-zsh的话,则有一个更简单的方法</p>
<h2 id="oh-my-zsh">oh-my-zsh</h2>
<p>oh-my-zsh现在已经几乎成为了标配,这里不做介绍,如果你没有使用它,可以到这里查看<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a></p>
<p>只需要在<code>.zshrc</code>中的找到这一行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">plugins</span>=<span class="string">(git bundler)</span></div></pre></td></tr></table></figure>

<p>plugins中加入bundler,绝大部分情况下就不需要再手动敲上<code>bundle exec</code>了.</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/bundler/bundler.plugin.zsh#L9" target="_blank" rel="external">源码看这里</a></p>
]]></content>
    
    
      <category term="ruby" scheme="http://blog.ligan.me/tags/ruby/"/>
    
      <category term="bundler" scheme="http://blog.ligan.me/tags/bundler/"/>
    
      <category term="Ruby" scheme="http://blog.ligan.me/categories/Ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rspec中使用feature spec进行用户/验收测试]]></title>
    <link href="http://blog.ligan.me/2013/09/08/rspec-feature-ce-shi-jian-jie/"/>
    <id>http://blog.ligan.me/2013/09/08/rspec-feature-ce-shi-jian-jie/</id>
    <published>2013-09-08T07:55:00.000Z</published>
    <updated>2014-12-07T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="feature_spec与request_spec的区别">feature spec与request spec的区别</h2>
<p>rspec和capybara在ruby程序员中很多人都不陌生了.在2.0版本以后的capybara中,新加入了feature spec的写法.在rspec中默认使用spec/feature,而不再使用spec/request.</p>
<p>feature spec在测试中来说是比较高等级的测试.大概相当于集成测试或者更高级别的用户/验收测试.一般是模拟用户的实际操作和应用外部的请求来执行测试.简单来说就是模拟浏览器中的动作,期待应用正确的反应.</p>
<p>为什么2.0之后的capybara要做出这样的改动呢?</p>
<p>因为一般的来说capybara是模拟浏览器中的动作,这种测试是相当于模拟一个用户在用户界面中的操作,是基于usercase的.而以前的request spec则还是没有脱离应用层面(发送http请求,比较相应结果),比如在以前的capybara的dsl中,使用’get’来访问页面,而现在则改成了’visit’.后者’访问’这个动作,比’get’这个http请求更接近于用户的行为.</p>
<p>所以使用feature spec相对来说更符合behavior的思想,也带来更好的阅读性.</p>
<h2 id="rails中使用feature_spec">rails中使用feature spec</h2>
<p>本文以rails为例,来介绍feature spec的使用.</p>
<p>首先安装rspec和capybara,在gemfile中加入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">group <span class="symbol">:development</span>, <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  gem <span class="string">'rspec-rails'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">group <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  gem <span class="string">'capybara'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>之后执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle <span class="operator"><span class="keyword">install</span></span></div></pre></td></tr></table></figure>

<p>再之后执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">rails</span> <span class="tag">generate</span> <span class="tag">rspec</span><span class="pseudo">:install</span></div></pre></td></tr></table></figure>

<p>rspec和capybara就安装完毕了.</p>
<p>rails中的generator默认生成的集成测试会在request/xxxx_spec.rb.默认是不支持capybara的,我们如果要在其中使用capybara还要在spec_helper中的configure中加入<code>config.include Capybara::DSL</code></p>
<p>而我们要使用的feature/xxxx_spec.rb目前尚无法由rails自动生成,但是不用做任何设置就可以支持capybara的DSL.</p>
<p>所以我们手动建立spec/feature文件夹,在其中手动创建xxx_spec.rb的测试文件.</p>
<h2 id="feature_spec写法">feature spec写法</h2>
<p>在feature spec中,我们使用<code>feature-scenario</code> 来替代之前rspec的<code>describe - it</code>模式<br>注意两者千万不要混写成<code>feature-it</code>或者<code>describe-scenario</code>这种不伦不类的风格..</p>
<p>另外与describe不同,feature下面是不允许再套feature的.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">describe <span class="string">'Static pages'</span> <span class="keyword">do</span></div><div class="line">  describe <span class="string">'Home page'</span> <span class="keyword">do</span></div><div class="line">    it <span class="string">"should have the content 'Sample App'"</span> <span class="keyword">do</span></div><div class="line">      visit <span class="string">'/static_pages/home'</span></div><div class="line">      expect(page).to have_content(<span class="string">'Sample App'</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>这样是可以的,但是把describe换成feature则会报错.</p>
<p>feature spec的测试中,我们一般按照待测的功能点来划分用例,即每一个feature.而每一个scenario对应一条user case.这一点和测试人员写测试用例的方法很相似.比如下面的2条测试用例</p>
<table>
<thead>
<tr>
<th>功能点</th>
<th>用户输入</th>
<th style="text-align:center">期望结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户登录</td>
<td>用户输入正确的用户名和密码</td>
<td style="text-align:center">登录成功</td>
</tr>
<tr>
<td></td>
<td>用户输入错误的用户名和密码</td>
<td style="text-align:center">登录失败</td>
</tr>
</tbody>
</table>
<p>使用feature spec的方式写出的测试代码如下.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">"spec_helper"</span></div><div class="line"></div><div class="line">feature <span class="string">'Login'</span> <span class="keyword">do</span></div><div class="line">  scenario <span class="string">'User enter right account'</span> <span class="keyword">do</span></div><div class="line">    visit <span class="string">'/login'</span></div><div class="line">    fill_in <span class="string">'Name'</span>, <span class="symbol">:with</span> =&gt; <span class="string">'username'</span></div><div class="line">    fill_in <span class="string">'Password'</span>, <span class="symbol">:with</span> =&gt; <span class="string">'right'</span></div><div class="line">    click_button <span class="string">'login'</span></div><div class="line"></div><div class="line">    expect(page).to have_text(<span class="string">'welcome back,username'</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  scenario <span class="string">'User enter wrong account'</span> <span class="keyword">do</span></div><div class="line">    visit <span class="string">'/login'</span></div><div class="line">    fill_in <span class="string">'Name'</span>, <span class="symbol">with:</span> <span class="string">'username'</span></div><div class="line">    fill_in <span class="string">'Password'</span>, <span class="symbol">with:</span> <span class="string">'wrong'</span></div><div class="line">    click_button <span class="string">'login'</span></div><div class="line"></div><div class="line">    expect(page).to have_text(<span class="string">'Wrong password,please try again!'</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>

<p>feature spec的简单介绍就写到这里,希望大家喜欢这种方式.</p>
]]></content>
    
    
      <category term="测试" scheme="http://blog.ligan.me/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="capybara" scheme="http://blog.ligan.me/tags/capybara/"/>
    
      <category term="rspec" scheme="http://blog.ligan.me/tags/rspec/"/>
    
      <category term="ruby" scheme="http://blog.ligan.me/tags/ruby/"/>
    
      <category term="Ruby" scheme="http://blog.ligan.me/categories/Ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用rvm更好的管理你的gem]]></title>
    <link href="http://blog.ligan.me/2013/09/05/using-rvm-manage-your-gems/"/>
    <id>http://blog.ligan.me/2013/09/05/using-rvm-manage-your-gems/</id>
    <published>2013-09-04T17:42:00.000Z</published>
    <updated>2014-12-07T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="rvm一个重要的功能_gemset">rvm一个重要的功能 gemset</h2>
<p>rvm作为一种方便的ruby安装和管理方式已经被大家所习惯和接受.但是rvm中另外一个重要的功能gemset使用率却不高.本文简单介绍一下gemset的正确使用姿势.</p>
<p><strong>gemset本身有很大争议,很多人认为gem的管理交给bundler去做就足够好了,因此使用rbenv.</strong>而我认为gemset相对来说还是比较方便.通过对gem的物理隔离,从而在批量操作gem时候更加放心.比如我曾经手贱使用bundle update升级了所有的gem,之后在给别人演示rails的时候突然惊讶的发现rails版本升到了4.0而吓出一身冷汗 （还没有接触过4.0,还好那次没有出什么丑 ）.</p>
<h2 id="gemset基本使用">gemset基本使用</h2>
<p>先从gemset基本使用开始讲起<br><br>我们平时使用rvm不指定gemset时,默认使用的是当前ruby版本下的default gemset,如<code>2.0@default</code>.如果想创建自己的gemset则使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">╭─<span class="constant">Gavin</span><span class="variable">@ligan</span>  ~ ‹ruby-<span class="number">2.0</span>.<span class="number">0</span>›</div><div class="line">╰─<span class="variable">$ </span>rvm gemset create rails4</div><div class="line"> <span class="constant">Gemset</span> <span class="string">'rails40'</span> created.</div></pre></td></tr></table></figure>

<p>这样我们就拥有了一个gemset “rails40”,想要将该gemset设为默认gemset则使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">╭─Gavin<span class="property">@ligan</span>  ~ ‹ruby-<span class="number">2.0</span><span class="number">.0</span>›</div><div class="line">╰─$ rvm use <span class="number">2.0</span><span class="property">@rails4</span> --<span class="reserved">default</span></div><div class="line"> Using <span class="regexp">/Users/Gavin/</span>.rvm/gems/ruby-<span class="number">2.0</span><span class="number">.0</span>-p247 <span class="reserved">with</span> gemset rails4</div></pre></td></tr></table></figure>

<p>以上命令可以简化为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>rvm <span class="keyword">use</span> <span class="number">2.0</span><span class="variable">@rails4</span> --create --default</div></pre></td></tr></table></figure>

<p>我们还可以对gemset进行删除,切换,导入导出,清空,升级等操作,具体请查看<a href="http://rvm.io/" target="_blank" rel="external">文档</a></p>
<h2 id="项目中的gemset使用">项目中的gemset使用</h2>
<p>我们有了不同的gemset,目的就是为了区分不同项目中不同的环境.在不同的项目中我们可以通过rvmrc, gemfile, ruby-version等来使rvm自动切换到项目当前所需要的环境中.</p>
<p>rvm 1.11之前只支持在项目中添加.rvmrc的方式来切换rvm环境,而在1.22之后则建议使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm --<span class="keyword">ruby</span>-<span class="keyword">version</span> use <span class="number">2.0</span>@rails4</div></pre></td></tr></table></figure>

<p>这样rvm会同时在项目中创建.ruby-version以及.ruby-gemset文件来标识该项目所使用的ruby版本及gemset.同时<strong>这种方式所生成的ruby版本信息同样被rbenv等工具所支持</strong></p>
<p>完成了以上工作之后我们再进入项目文件夹时,ruby版本及gemset就会自动切换到该项目的依赖环境下,相当于执行了一次<code>rvm use 2.0@rails4</code>,而退出该项目文件夹后则会回复默认ruby版本及gemset.</p>
<p>另外,有些时候我们所进入的项目中所包含的gemset信息本地并没有.这个时候我们希望能够自动创建对应的gemset,可以编辑<code>~/.rvmrc</code> 或者 <code>/etc/rvmrc</code>文件,加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rvm_gemset_create_on_use_flag</span>=<span class="string">1</span></div></pre></td></tr></table></figure>

<p>从此在执行<code>rvm use</code>时候我们不需要加入<code>--create</code>参数便可以直接创建gemset</p>
<h2 id="rvm_gemset体系">rvm gemset体系</h2>
<p>rvm中gemset除了default之外,还有一个global gemset.当前ruby版本下,所有的gemset都会继承global这个gemset下的所有gem.每个ruby版本又分别有一个global,default,以及自己创建的gemset.各ruby版本之间相互独立.上面还有一个所有版本公用的global gemset.</p>
<p>有了global这个gemset之后,我们就可以把一些每个gemset都要用,又不想重复安装的gem统统放入global这个gemset中,比如rake, pry, bundler之类.</p>
<p>可以通过编辑 ~/.rvm/gemsets/global.gems,加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">bundler</span></div><div class="line">awesome_print</div><div class="line">pry</div></pre></td></tr></table></figure>

<p>这样每次安装新的ruby版本时,该版本ruby的global下都会自动安装好以上几个gem</p>
<h2 id="说了这么多我就是不想用gemset">说了这么多我就是不想用gemset</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"export rvm_ignore_gemsets_flag=1"</span> &gt;&gt; ~/.rvmrc</div></pre></td></tr></table></figure>

<p>这样就会忽略所有的gemset信息.永远的使用默认的gemset,其他项目中的gemset信息不会对你造成困扰.</p>
]]></content>
    
    
      <category term="rvm" scheme="http://blog.ligan.me/tags/rvm/"/>
    
      <category term="gem" scheme="http://blog.ligan.me/tags/gem/"/>
    
      <category term="ruby" scheme="http://blog.ligan.me/tags/ruby/"/>
    
      <category term="Ruby" scheme="http://blog.ligan.me/categories/Ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[zsh alias with parameters]]></title>
    <link href="http://blog.ligan.me/2013/01/06/zsh-alias-with-parameters/"/>
    <id>http://blog.ligan.me/2013/01/06/zsh-alias-with-parameters/</id>
    <published>2013-01-06T14:01:00.000Z</published>
    <updated>2014-12-07T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<p>以前经常加一些alias来偷懒减少输入。今天在使用pandoc转换markdown文档时也想使用alias简化输入。例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pandoc <span class="keyword">list</span>.markdown -<span class="keyword">t</span> html -<span class="keyword">o</span> <span class="keyword">list</span>.markdown.html</div></pre></td></tr></table></figure>

<p>想要省掉一堆-t html -o 什么的参数，最好是我只需要输入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">pd</span> 文件名</div></pre></td></tr></table></figure>

<p>就可以完成转换，zsh在alias中加参数的方法稍微有些不一样，查看zsh文档的一堆废话后（csh中怎么写的，zsh和csh不一样，balabala），在.zshrc中加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">pd</span></span>() { pandoc <span class="string">"<span class="variable">$1</span>"</span> -t html -o <span class="string">"<span class="variable">$1</span>"</span>.html; }</div></pre></td></tr></table></figure>

<p>之后试验一下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">╭─gavin@Gavin-PC  ~/ligan/Training/demo ‹<span class="keyword">ruby</span>-<span class="number">1.9</span>.<span class="number">3</span>›</div><div class="line">╰─$ <span class="keyword">ls</span></div><div class="line"><span class="keyword">list</span>.md</div><div class="line">╭─gavin@Gavin-PC  ~/ligan/Training/demo ‹<span class="keyword">ruby</span>-<span class="number">1.9</span>.<span class="number">3</span>›</div><div class="line">╰─$ pd <span class="keyword">list</span>.md</div><div class="line">╭─gavin@Gavin-PC  ~/ligan/Training/demo ‹<span class="keyword">ruby</span>-<span class="number">1.9</span>.<span class="number">3</span>›</div><div class="line">╰─$ <span class="keyword">ls</span></div><div class="line"><span class="keyword">list</span>.md  <span class="keyword">list</span>.md.html</div></pre></td></tr></table></figure>

<p>大功告成</p>
]]></content>
    
    
      <category term="zsh" scheme="http://blog.ligan.me/tags/zsh/"/>
    
      <category term="Linux" scheme="http://blog.ligan.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[就这么到了2013年了]]></title>
    <link href="http://blog.ligan.me/2013/01/03/jiu-zhe-yao-dao-liao-2013nian-liao/"/>
    <id>http://blog.ligan.me/2013/01/03/jiu-zhe-yao-dao-liao-2013nian-liao/</id>
    <published>2013-01-03T11:51:00.000Z</published>
    <updated>2014-12-07T15:39:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="2012_过去了">2012 过去了</h2>
<p>世界末日没来，依然没有成为高富帅，被逼着裸婚了，学习没有长进，又浪费了一年.</p>
<h2 id="2013_也立个目标吧">2013 也立个目标吧</h2>
<ul>
<li>找份喜欢的工作</li>
<li>不和傻逼为伍</li>
<li>远离monkey test</li>
</ul>
<p>对了，还有开始写blog</p>
]]></content>
    
    
      <category term="闲聊" scheme="http://blog.ligan.me/tags/%E9%97%B2%E8%81%8A/"/>
    
      <category term="闲聊" scheme="http://blog.ligan.me/categories/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[First Blood]]></title>
    <link href="http://blog.ligan.me/2012/10/01/first-blood/"/>
    <id>http://blog.ligan.me/2012/10/01/first-blood/</id>
    <published>2012-10-01T13:50:00.000Z</published>
    <updated>2014-12-07T15:36:42.000Z</updated>
    <content type="html"><![CDATA[<p>卖个萌,over</p>
]]></content>
    
    
      <category term="闲聊" scheme="http://blog.ligan.me/tags/%E9%97%B2%E8%81%8A/"/>
    
      <category term="闲聊" scheme="http://blog.ligan.me/categories/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
</feed>
